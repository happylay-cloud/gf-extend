// 指定版本信息
syntax="proto3";

// 生成go文件的包名
package pb;

// 生成go文件的路径
option go_package          = "test/pb";

// 开启Java多文件
option java_multiple_files = false;

// 生成的Java文件的package路径
option java_package        = "test.pb";

// message为关键字，作用为定义一种消息类型
message Person {
  string	name = 1;					        // 姓名
  int32	age = 2;					          // 年龄
  repeated string emails = 3; 		  // 电子邮件（repeated表示字段允许重复，类似切片、数组）
  repeated PhoneNumber phones = 4;	// 手机号
}

// message为关键字，作用为定义一种消息类型可以被另外的消息类型嵌套使用
message PhoneNumber {
  string number = 1;
  PhoneType type = 2;
}

// enum为关键字，作用为定义一种枚举类型
enum PhoneType {
  MOBILE = 0;
  HOME = 1;
  WORK = 2;
}

// 消息格式
// 字段修饰符 + 数据类型 + 字段名称 + 唯一的编号标签值
// 字段名称：蛇形或者驼峰
// 唯一的编号标签：代表每个字段的一个唯一的编号标签，在同一个消息里不可以重复。
//  这些编号标签用与在消息二进制格式中标识你的字段，并且消息一旦定义就不能更改。
//  需要说明的是标签在1到15范围的采用一个字节进行编码，
//  所以通常将标签1到15用于频繁发生的消息字段。编号标签大小的范围是1到229
// 注释格式：向.proto文件添加注释，可以使用C/C++/Java/Go风格的双斜杠（//）语法格式

service UserService {
  rpc Login(LoginReq) returns (LoginResp);
}

message LoginReq {
  string username = 1;
  string password = 2;
}

message LoginResp {
  int32 code = 1;
  string msg = 2;
}

// 编译
// protoc --go_out=./ --java_out=./ *.proto

// 编译为go代码
// protoc --go_out=plugins=grpc,paths=source_relative:. --validate_out="lang=go,paths=source_relative:." hgrpc.proto

// 编译为grpc对应go代码
// protoc --go_out=plugins=grpc:. *.proto

// 编译为java代码
// protoc ./hgrpc.proto --java_out=./

// 生成proto文档（markdown）
// protoc --doc_opt=markdown,protocol.md --doc_out=./ ./*.proto

// 生成proto文档（html）
// protoc --doc_opt=html,index.html --doc_out=./ ./*.proto


